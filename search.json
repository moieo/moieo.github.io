[{"title":"ArchLinux Plasma 6 开启Samba服务（文件共享）","path":"/2025/04/24/220548/","content":"在 Plasma 6 中的 Dolphin 使用文件共享 安装相关的插件1pacman -Sy kdenetwork-filesharing 编辑 Samba 配置文件文件路径 /etc/samba/smb.conf 123456789101112131415161718192021222324252627[global] usershare path = /var/lib/samba/usershares usershare max shares = 100 # usershare allow guests = yes usershare owner only = no workgroup = WORKGROUP security = user passdb backend = smbpasswd name resolve order = lmhosts bcast host wins unix charset = UTF-8 load printers = no printing = bsd printcap name = /dev/null disable spoolss = yes show add printer wizard = no server string = Samba Server log file = /var/log/samba/log.%m # Put a capping on the size of the log files (in Kb). max log size = 50 dns proxy = no #============================ Share Definitions ============================== # #[homes] # 启用这个块会默认共享对应用户的home目录# comment = Home Directories # browsable = no # writable = yes 配置用户组和文件夹12345mkdir /var/lib/samba/usersharesgroupadd fileshareusermod -a -G fileshare $(whoami)chown root:fileshare /var/lib/samba/usershareschmod 1771 /var/lib/samba/usershares 启动 Samba 服务12systemctl restart smb nmbsystemctl enable smb nmb 将Linux用户添加到Samba数据库这一步可以为Samba用户设置独立的密码 1smbpasswd -a $(whoami) 重启1reboot","categories":["Linux"]},{"title":"ArchLinux安装过程","path":"/2025/04/23/152137/","content":"连接网络插入有线连接再启动ISO就行了，不深究使用ping t.cn 能通就行了 更新系统时钟1234timedatectl set-ntp true# 将系统时间与网络时间进行同步timedatectl status# 检查服务状态 更换镜像要换镜像网上搜去，这里不提供！ 分区使用fdisk工具进行分区操作我这里使用的是 分区 大小 设备 备注 &#x2F; 500GiB &#x2F;dev&#x2F;nvme0n1p7 根目录（系统装在这个分区里） &#x2F;boot 1Gib &#x2F;dev&#x2F;nvme0n1p6 引导分区 &#x2F;boot&#x2F;efi &#x2F;dev&#x2F;nvme0n1p1 与Windows共用 格式化将创建好的分区进行格式化，这里使用btrfs格式的根目录分区btrfs 格式的分区可以使用 zstd 进行压缩，支持快照功能 12mkfs.btrfs -f /dev/nvme0n1p7mkfs.ext4 /dev/nvme0n1p6 挂载分区 123456# 挂载根目录分区 (我是不是应该创建子卷更好，毕竟我已经用btrfs了都)mount -t btrfs -o compress=zstd:5 /dev/nvme0n1p7 /mnt# 创建引导分区挂载需要的文件夹mkdir /mnt/boot# 挂载引导分区mount -t ext4 /dev/nvme0n1p6 /mnt/boot 安装系统基础软件1pacstrap /mnt base base-devel linux linux-firmware btrfs-progs networkmanager neovim sudo bash bash-completion grub efibootmgr os-prober 生成 fstab 文件fstab 用来定义磁盘分区。它是 Linux 系统中重要的文件之一。使用 genfstab 自动根据当前挂载情况生成并写入 fstab 文件 1genfstab -U /mnt &gt; /mnt/etc/fstab 复查一下 /mnt/etc/fstab 确保没有错误 1cat /mnt/etc/fstab 切换到系统中1arch_chroot /mnt 修改时区1ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 🍧 碎碎念不要找北京啦！这里没有北京，只有上海啦！🚀 硬件时间设置将系统时间同步到硬件时间 1hwclock --systohc 修改语言1vim /etc/locale.gen 将en_US.UTF-8和zh_CN.UTF-8解除注释，然后用以下命令生成 1locale-gen 需要添加相关的字体 1sudo pacman -S noto-fonts-cjk noto-fonts-emoji noto-fonts-extra 创建用户如果需要安装plasma6桌面或者 GNOME 桌面，必须创建一个普通用户 1useradd -G wheel [用户名] 安装 Grub1grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=&quot;Arch Linux&quot; 生成Grub配置文件1grub-mkconfig -o /boot/grub/grub.cfg 安装 Plasma 6蓝牙相关的，如果没有蓝牙可以省略kde-applications 包含了KDE全家桶，不需要可以不装 1pacman -S plasma kde-applications sddm networkmanager bluez bluez-utils 需要启动相关的服务 1systemctl enable sddm bluetooth NetworkManager 安装完成123exit # 退出 arch_chrootumount -R /mntreboot 优化和问题解决电源管理123sudo pacman -S power-profiles-daemonsudo systemctl start power-profiles-daemon.servicesudo systemctl enable power-profiles-daemon.service 解决回退的蜂鸣声编辑 /etc/modprobe.d/nobeep.conf 1blacklist pcspkr sddm中蓝牙自动连接蓝牙被软锁了，但是暂时没发现其他解决方法，这样解决也可以编辑 /etc/udev/rules.d/99-rfkill-unblock-bluetooth.rules 1ACTION==&quot;add&quot;, SUBSYSTEM==&quot;bluetooth&quot;, KERNEL==&quot;hci0&quot;, RUN+=&quot;/usr/bin/rfkill unblock bluetooth&quot; 配置 AMD GPU我用的是 AMD Radeon 780M 的集承显卡修改 /etc/mkinitcpio.conf 1MODULES=(amdgpu radeon) 再修改 /etc/default/grub 中的 GRUB_CMDLINE_LINUX_DEFAULT 加入 radeon.cik_support=0 amdgpu.cik_support=1","tags":["ArchLinux"],"categories":["Linux"]},{"title":"解决OpenOCD/串口在Linux中的权限问题","path":"/2025/02/02/185312/","content":"问题说明：普通用户使用 OpenOCD 进行烧录时，无法访问USB设备，Arduino无法访问串口，每次使用 sudo 或者 pkexec 都需要输入密码，非常麻烦 解决方案把 OpenOCD 的 openocd/contrib/60-openocd.rules 复制到 /etc/udev/rules.d/ 文件夹中 串口的权限问题编辑文件 sudo vim /etc/udev/rules.d/70-ttyusb.rules文件内容 1KERNEL==&quot;ttyUSB[0-9]*&quot;, MODE=&quot;666&quot; 以上方案执行sudo udevadm control --reload后生效","tags":["嵌入式","Linux","Fedora"],"categories":["Linux","嵌入式"]},{"title":"Linux的GNOME中配置Minecraft游戏环境","path":"/2025/01/30/200000/","content":"测试环境 Linux: Fedora 41 GNOME 47HMCL启动器：https://hmcl.huangyuhui.net/download/安装相关环境： 1sudo dnf install java-21-openjdk openjfx 注意：Fedora 自带的 java-21-openjdk-handless 无法启动 HMCL 需要在 Dash 栏显示软件名称的，需要编辑文件 ~/.local/share/applications/hmcl.desktop内容： 1234567891011[Desktop Entry]Encoding=UTF-8Name=HMCLGenericName=Hello Minecraft! LauncherComment=A launcher to start MinecraftExec=java -Dprism.forceGPU=true -jar /home/moieo/Minecraft/HMCL-3.6.11.jarIcon=/home/moieo/Minecraft/.icon@8x.pngStartupWMClass=org.jackhuang.hmcl.LauncherTerminal=falseType=ApplicationCategories=Application;Game; ICON和JAR路径根据自己的情况修改ICON可以解压JAR包获取如果使用了 Rounded Window Corners Reborn 圆角插件的，需要将插件排除包名org.jackhuang.hmcl.Launcher，否则会有一个透明边框在外围 字体使用 文泉驿，界面正常显示 123sudo dnf install wqy-bitmap-fonts -ysudo dnf install wqy-unibit-fonts -y sudo dnf install wqy-zenhei-fonts -y","tags":["Linux","Minecraft"],"categories":["Linux"]},{"title":"开发环境资源","path":"/2025/01/25/212445/","content":"开发环境资源 地址: https://www.123865.com/s/k3arVv-JRMb 各开发环境资源 OpenJDK 裸机GCC编译器 SDCC编译器 msys2 make工具 地址：https://www.123865.com/s/k3arVv-IRMb UCRT编译器相关资源 UCRT编译器 PostgreSQL MariaDB-Connector","categories":["资源"]},{"title":"ADC 采样 NTC 热敏电阻计算实际温度值","path":"/2024/07/31/221520/","content":"通过 ADC 方式采样 NTC 热敏电阻 (10K)得到 12 位采样数据（右对齐） 通过 Steinhart-Hart 方程计算并得到温度计算公式适用于 3.3v 基准电压，12 位宽 的情况 转换公式如下 1234#define to_temperature(adc_value) (1.0 / (0.001129148 + 0.000234185 * \\ log((10000 * adc_value * (3.3 / 4095.0)) / (3.3 - adc_value * \\ (3.3 / 4095.0))) + 0.0000000876741 * pow(log((10000 * adc_value * \\ (3.3 / 4095.0)) / (3.3 - adc_value * (3.3 / 4095.0))), 3))) - 273.15","tags":["单片机","嵌入式"],"categories":["嵌入式"]},{"title":"STM32F103 实现 4x4 矩阵键盘的扫描","path":"/2024/07/09/194457/","content":"直接放一个实物图在这里接线放在这里~ STM32F103C8T6 4x4 A0 C4 A1 C3 A2 C2 A3 C1 A4 R1 A5 R2 A6 R3 A7 R4 实现原理遍历矩阵的每一行，开始时将当前遍历的行设置为 低电平，再扫描每一列并判断找出为低电平的列号，符合要求时记录行号和列号结束当前行时再将当前行设置为 高电平 源代码MATRIX_KEY_Sx 的编号由行号和列号组成matrix_key.h 12345678910111213141516171819202122232425262728293031323334#ifndef __MATRIX_KEY__#define __MATRIX_KEY__#include &lt;stm32f10x.h&gt;#define ROW_PINS (GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7) // 定义行引脚为GPIOA的4、5、6、7#define COL_PINS (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3) // 定义列引脚为GPIOA的0、1、2、3// 第1行#define MATRIX_KEY_S1 0x18 // 0001 1000#define MATRIX_KEY_S2 0x14 // 0001 0100#define MATRIX_KEY_S3 0x12 // 0001 0010#define MATRIX_KEY_S4 0x11 // 0001 0001// 第2行#define MATRIX_KEY_S5 0x28 // 0010 1000#define MATRIX_KEY_S6 0x24 // 0010 0100#define MATRIX_KEY_S7 0x22 // 0010 0010#define MATRIX_KEY_S8 0x21 // 0010 0001// 第3行#define MATRIX_KEY_S9 0x48 // 0100 0100#define MATRIX_KEY_S10 0x44 // 0100 0100#define MATRIX_KEY_S11 0x42 // 0100 0010#define MATRIX_KEY_S12 0x41 // 0100 0001// 第4行#define MATRIX_KEY_S13 0x88 // 1000 1000#define MATRIX_KEY_S14 0x84 // 1000 0100#define MATRIX_KEY_S15 0x82 // 1000 0010#define MATRIX_KEY_S16 0x81 // 1000 0001void Init_Matrix_Key(void);void Scan_Matrix_Key(void (*Call_Back)(uint8_t));#endif matrix_key.c 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;stm32f10x.h&gt;#include &lt;Delay.h&gt;#include &lt;matrix_key.h&gt;void Init_Matrix_Key(void) &#123; GPIO_InitTypeDef GPIO_InitStructure; RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE); // 使能GPIOA时钟 // 设置行引脚为推挽输出 GPIO_InitStructure.GPIO_Pin = ROW_PINS; GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; GPIO_Init(GPIOA, &amp;GPIO_InitStructure); // 设置列引脚为上拉输入 GPIO_InitStructure.GPIO_Pin = COL_PINS; GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; GPIO_Init(GPIOA, &amp;GPIO_InitStructure);&#125;void Scan_Matrix_Key(void (*Call_Back)(uint8_t)) &#123; uint8_t row, col; uint8_t keyDetected = 0; for (row = 0; row &lt; 4; row++) &#123; // 遍历行 GPIO_ResetBits(GPIOA, 1 &lt;&lt; (row + 4)); // 将当前行置为低电平，注意这里使用1 &lt;&lt; (row + 4)来选中行 Delay_us(10); // 短暂延时以稳定电平 for (col = 0; col &lt; 4; col++) &#123; // 遍历列 if (GPIO_ReadInputDataBit(GPIOA, 1 &lt;&lt; col) == Bit_RESET) &#123; // 判断该列是否为低电平 Delay_ms(100); // 延时去抖动 if (GPIO_ReadInputDataBit(GPIOA, 1 &lt;&lt; col) == Bit_RESET) &#123; // 再次检查，确认按键被按下 keyDetected = (1 &lt;&lt; col) | (1 &lt;&lt; (row + 4)); // 记录按键位置 Call_Back(keyDetected); break; // 跳出列循环，因为同一时间只能有一个按键被按下 &#125; while(GPIO_ReadInputDataBit(GPIOA, 1 &lt;&lt; col) == Bit_RESET);// 等待弹起 &#125; &#125; GPIO_SetBits(GPIOA, 1 &lt;&lt; (row + 4)); // 恢复该行至高电平 if (keyDetected) &#123; break; // 如果检测到按键，跳出行循环 &#125; &#125;&#125; 在 main 中调用 1234567891011121314void Matrix_Key_Callback(uint8_t key) &#123; switch(key) &#123; case MATRIX_KEY_S1: // TODO break; &#125;&#125;int main(void) &#123; Init_Matrix_Key(); // 初始化 while (1) &#123; Scan_Matrix_Key(Matrix_Key_Callback); &#125;&#125; 你可以在串口中输出按键的号码~","tags":["单片机","嵌入式","STM32","MCU"],"categories":["STM32","嵌入式"]},{"title":"CMD常用命令","path":"/2024/07/04/203738/","content":"查看目录文件1dir 查看本机 IP1ipconfig 清除屏幕1cls 复制文件1move 路径\\文件名 路径\\文件名 删除文件1del 文件名 测试网络是否畅通1ping [IP/主机名] 列出所有任务及进程号1tasklist 路由跟踪1tracert [IP/主机名] 组策略1gpedit.msc IP地址侦测器1nslookup 资源管理器1explorer 注销1logoff 关机1shutdown -r -t 0 倒计时 60 秒关机1shutdown 本地用户和组1lusrmgr.msc 本地用户设置1services.msc 记事本1notepad 垃圾整理1cleanmgr 开始信使服务1net start messenger 停止信使服务1net stop messenger 计算机管理1compmgmt.msc DVD 播放1dvdplay 启动字符映射表1charmap 磁盘管理1diskmgmt.msc 计算器1calc 磁盘碎片整理1dfrg.msc Chkdsk 磁盘检查1chkdsk 设备管理器1devmgmt.msc 注册表编辑器1regedit 检查Windows版本1winver 扫描错误并复原1sfc /scannow 任务管理器1taskmgr 写字板1write 屏幕键盘1osk 打开控制台1mmc 关机&#x2F;重启&#x2F;注销&#x2F;休眠&#x2F;定时 关机 shutdown /s 重启 shutdown /r 注销 shutdown /l 休眠 shutdown /h /f 取消关机 shutdown /a 定时关机 shutdown /s /t (3600秒后关机) 清除本地DNS缓存1ipconfig /flushdns 服务管理显示当前正在运行的服务 1net start 启动指定的服务1net start [服务名] 停止指定服务1net stop [服务名]","tags":["Windows"],"categories":["Windows"]},{"title":"除了 VuePress，还有哪些文档工具值得推荐？","path":"/2024/02/04/171624/","content":"为什么要使用文档生成工具？使用文档工具可以快速生成文档的静态网站，节省非常多的时间，提高效率，一致性以易于维护和分发 文档生成工具可以帮助作者将内容按照逻辑结构组织起来，比如章节、子章节等，确保信息有序且易于查找 统一主题样式，保持整个文档一致的品牌风格和视觉效果 自动生成目录，方便读者快速导航 生成的静态页面对搜索引擎友好，加载速度也较快，可以提高网站的访问速度和用户体验 首先说说 VuePress 吧 VuePressVuePress 是一个基于 Vue 的静态网站生成器。它使用 Markdown 来编写文档，并使用 Vue 来渲染文档内容 优点 高度可定制：基于 Vue.js，可以非常灵活地定制文档界面和功能 性能优异：利用 Vue 的单页应用特性，提供良好的页面加载性能和用户体验 SEO 友好：默认集成了 SEO 优化功能 Markdown 支持：良好的 Markdown 支持，易于编写文档 缺点 学习曲线：对于不熟悉 Vue.js 的用户来说，可能需要一定的学习成本。 **复杂配置：**对于高级功能，配置可能相对复杂。 DocusaurusDocusaurus 是一个简洁且强大的静态站点生成器，适用于快速构建和维护项目文档、博客和技术宣传页面。由Meta（前身为Facebook）开源，它利用React技术栈，使得用户能够以Markdown格式轻松编写和组织内容。 优点 易于配置：配置简单，易于上手。 Markdown 支持：支持 Markdown，编写文档方便。 主题丰富：提供多个美观的主题供选择。 社区支持：由 Facebook 支持，社区活跃。 缺点 功能相对有限：相比于 VuePress，高级功能可能不足。 性能：相比于 VuePress，页面加载速度可能较慢。 MkDocsMkDocs 是一个轻量级的静态网站生成器，专为编写和发布项目文档而设计。它允许用户使用简单的 Markdown 语言来撰写文档，并通过 MkDocs 的构建命令将这些 Markdown 文件转换成结构化的、美观的 HTML 静态网页。 优点 简单易用：安装和配置简单，适合初学者。 ** Markdown 友好**：对 Markdown 的支持很好，编写文档轻松。 可定制性：可以通过自定义 CSS 和模板进行一定程度的定制。 插件系统：有一套可用的插件，可以扩展功能。 缺点 自定义能力有限：相对于 VuePress，复杂的自定义可能难以实现。 插件生态较小：相比于 VuePress，插件数量和功能有限。 mdBookmdBook 是一个用 Rust 语言编写的开源命令行工具，用于从 Markdown 文件创建和管理在线书籍、文档集或教程。它提供了一个结构化的环境来组织和构建包含章节、副标题以及可选的自定义导航和样式表等内容的电子书或文档项目。 这个工具只适合做一本书或文档，不适合多个文档的集合。 看起来比较不错，如果你用它来编写 Rust 相关的文档，可以生成一个直接调用官方的接口，直接在网页中执行 Rust 代码片段。 优点 性能优异：使用 Rust 编写，加载速度快，性能稳定。 Markdown 原生支持：编写文档简单直观，格式化自然。 简洁专注：设计简单，专注于Markdown文档生成，没有多余的复杂功能 多平台支持：支持多种操作系统，方便使用。 缺点 功能相对有限：相比于其他工具，可能缺乏一些高级功能和交互性。 插件生态较小：插件数量和功能有限，可能无法满足所有需求。 社区支持：虽然社区活跃，但规模不如 VuePress 和 Docusaurus。","tags":["Web","静态页面","静态网站","博客","文档"],"categories":["工具"]},{"title":"使用 Caddy 部署 Vue 等单页面Web应用","path":"/2023/01/25/161921/","content":"安装 CaddyCaddy 是一个 Go 语言编写的开源 HTTP 服务器 Caddy 有下面这些开箱即用的特性: 全自动支持 HTTP&#x2F;2 协议，无需任何配置。 Caddy 使用 Let’s Encrypt 让你的站点全自动变成 HTTPS，无需任何配置。 合理使用多核多核 得益于 go 的特性 完全支持 IPv6 环境 Caddy 对 WebSockets 有很好的支持 自动把 Markdown 转成 HTML Caddy 对 log 格式的定义很容易 易于部署 得益于 go 的特性，caddy 只是一个小小的二进制文件，没有依赖，很好部署 得益于 Go 的跨平台特性，Caddy 很容易的支持了三大主流系统：Windows、 Linux、Mac来自 知乎 @shooter https://caddyserver.com/Caddy 官网 https://caddyserver.com/download下载 Caddy 本文配置 均使用 Caddyfile 文件 基本配置HTTP + HTTPS 1234moieo.cn &#123; root * /srv/http # 网站根目录 file_serve # 启用文件系统&#125; HTTP 1234http://moieo.cn &#123; root * /srv/http # 网站根目录 file_serve # 启用文件系统&#125; 反之只用 HTTPS Vue 等单页面应用部署12345678910111213141516171819moieo.cn &#123; root * /srv/http # 网站的根目录 encode gzip zstd # 开启 gzip route &#123; # 找不到文件时 使用 index.html # 解决 history 路由模式 404 的问题 try_files &#123;path&#125; /index.html file_server # 开启文件系统 &#125; # 处理日志 log &#123; output file /data/moieo.cn.log # 保存文件 format console # 日志格式 level INFO # 日志级别 &#125;&#125; 开启 Caddy 文档https://caddyserver.com/docs/Caddy 官方文档 https://caddy2.dengxiaolong.com/docs/Caddy 中文文档 中文文档访问速度快","tags":["Node","Caddy"],"categories":["Vue","Node"]},{"title":"AdGuard看门狗效果不好？试试这种个Shell脚本","path":"/2023/01/10/202600/","content":"什么是 AdGuard知道的可以跳过，留给不知道的人 AdGuard 是摆脱恼人广告、在线跟踪，保护您远离恶意软件的最佳选择。AdGuard 使您网络冲浪更快速，更安全，更便捷！ AdGuard 官网https://adguard.com 为什么会写这个脚本 AdGuard 经常被系统杀死 看门狗偶尔失效 运行脚本使用 adb shell 或 rish系统自带 curl 可以直接用下面的判断有没有 curl，执行 ls /system/bin/curl显示 /system/bin/curl 就表示有 curl 用 rish 请把 adb shell 改成 ./rish -c 系统没有 curl，直接下载脚本 KeepAdGuard.shhttps://moieo.gitee.io/KeepAdGuard.sh 使用 rootTermux 直接 root 授权后执行 adb shell 双引号里的内容","tags":["Android","Adb","广告过滤"],"categories":["Android"]},{"title":"还在手动部署 Hexo？看看这里","path":"/2022/11/13/153600/","content":"简单介绍Github Pages 是 Github 提供的一个免费的静态页面服务，可以用来部署一些静态页面，例如：Hexo、Jekyll、Hugo 等页面生成器所生成的页面，但是每次在本地写完自己的文章都要执行一次命令来部署，有点麻烦。 Github Actions 是 Github 的持续集成服务。简单的说，它可以使你的代码仓库自动化执行一些指令或代码。 操作过程 在你的仓库设置里，有一个 Pages 选项，在里面 Build and deployment 的 Source 选项设置如下 在源代码根目录新建文件就，结构如下 .github&#x2F;dependabot.yml 可以忽略 .github&#x2F;workflows&#x2F;build.yml 内容如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950name: Deploy Hexoon: push: branches: [main] # 改成分支名称 pull_request: branches: [main] # 改成分支名称 workflow_dispatch:permissions: contents: read pages: write id-token: writeconcurrency: group: &quot;pages&quot; cancel-in-progress: truejobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 with: submodules: recursive - name: Use Node.js uses: actions/setup-node@v3 with: node-version: 16.x - name: Setup Hexo Blog Dependencies run: | npm install hexo-cli -g npm install - name: Build with Hexo run: | hexo clean hexo generate ls - name: Upload artifact uses: actions/upload-pages-artifact@v1 with: path: public deploy: environment: name: github-pages url: $&#123;&#123; steps.deployment.outputs.page_url &#125;&#125; runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v1 完成后推送至 Github，这里必须推送整个 Hexo 的源代码，推送后 在 Actions 里可以看到执行过程和异常命令 有显示绿色勾说明正常部署，再次查看 Pages 设置 如下 我这边已绑定自己的域名，查看效果可自行浏览器访问上图域名查看，有 Visit site 按钮说明自动化部署成功图片，后面可以直接在 Github 内创建 .md 文件编写文章，Github 也自带有 Markdown 的一个预览，比较方便","tags":["Hexo"],"categories":["Hexo"]},{"title":"Vite+Vue+TypeScript项目中vue无默认导出的问题","path":"/2022/08/06/142535/","content":"问题如下在 Vite2 + Vue3 + TypeScript 项目中使用 vue-property-decorator 遇到报错日志如下 在新建一个 vue-cli 项目后，发现 package.json 里引用的是 vue-class-component@^8.0.0-0应该是 vue-class-component 的 7.x.x 版本的缘故 解决方案这里用的 pnpm卸载掉 vue-class-component，然后指定 8.0.0-0 版本安装 使用 CDN 的话，cdn 也要引用 8.x.x 版本才行 12pnpm remove vue-class-componentpnpm add vue-class-component@^8.0.0-0","tags":["Node","vite","vue"],"categories":["编程语言"]},{"title":"Vite+Vue使用外部CDN引用element-plus全家桶","path":"/2022/08/05/230838/","content":"参考：vue3+vite2增加element-plus的CDN链接打包构建 网上 Vite.js 的资料少，踩了不少坑在掘金中找到一篇资料，但还是避免不了遇到了一些奇奇怪怪的问题 我这边使用的 vite-plugin-cdn-import 插件 编辑 vite.config.ts 1import &#123; Plugin as importToCDN &#125; from &quot;vite-plugin-cdn-import&quot;; 12345678910111213141516171819202122232425importToCDN(&#123; modules: [ &#123; name: &quot;vue&quot;, var: &quot;Vue&quot;, path: &quot;//unpkg.com/vue@next&quot;, &#125;, &#123; name: &quot;vuex&quot;, var: &quot;Vuex&quot;, path: &quot;//unpkg.com/vuex@next&quot;, &#125;, &#123; name: &quot;vue-class-component&quot;, var: &quot;VueClassComponent&quot;, path: &quot;//unpkg.com/vue-class-component@next&quot;, &#125;, &#123; name: &quot;element-plus&quot;, var: &quot;ElementPlus&quot;, path: &quot;//unpkg.com/element-plus&quot;, css: &quot;//unpkg.com/element-plus/dist/index.css&quot;, &#125;, ],&#125;), 用原文中的方法会出现错误原因参考：使用了pinia或其他依赖于vue的库 上面方式可解决","tags":["Node","vite","vue"],"categories":["编程语言"]},{"title":"SQLMap进行SQL注入测试","path":"/2022/07/31/225935/","content":"介绍简介SQLMap 是一个开源的渗透测试工具，可以用来自动化检测，利用SQL注入漏洞，获取数据库的权限。它的检测引擎非常强大，针对不同类型的数据库有不同的方案和选项，获取数据库中存储的数据。 目前支持 MySQL、Oracle、PostgreSQL、Microsoft SQL Server、Microsoft Access 等数据库 输出级别 0：只显示python错误以及严重的信息1：同时显示基本信息和警告信息（默认）2：同时显示debug信息3：同时显示注入的payload4：同时显示HTTP请求5：同时显示HTTP响应头6：同时显示HTTP响应页面 安装 注：安装SQLMap需要Python环境 SQLMap官网https://sqlmap.org 克隆仓库 123git clone --depth 1 https://github.com/sqlmapproject/sqlmap.git sqlmapcd sqlmappython sqlmap.py 你也可以将它配置到环境变量中，具体方法请上搜索引擎找我这边配置了环境变量，所以可直接执行 使用1. 检查是否存在注入例如注入目标为：http://127.0.0.1:8080/?id=1则命令如下 1python sqlmap.py -u &quot;http://127.0.0.1:8080/?id=1&quot; 执行过程如下执行完毕后，可看到数据库类型，如果服务器后端使用的是PHP语言，会显示PHP的版本如图所示，数据库类型为 MySQLPHP版本为 8.1.8 2. 查询当前用户下所有数据库用途：该命令在确定网站存在SQL注入漏洞时，用于查询当前用户下的数据库 1python sqlmap.py -u &quot;http://127.0.0.1:8080/?id=1&quot; --dbs 运行结束后可看到一些 数据库 的名称，它们将以[*]开头--dbs参数缩写成-D xxx，该参数为查询xxx数据库下的内容 3. 获取数据库中的表名用途：该命令在确定网站存在SQL注入漏洞时，可获取数据库下所有表的名称 -D 参数用来指定数据库，例如 -D moieo 1python sqlmap.py -u http://127.0.0.1:8080/?id=1 -D moieo --tables 运行结束后可看到所有数据表的名称，继续注入可使用 -T 参数，该参数为 --tables的缩写，用于指定数据表继续注入获取数据 4. 获取数据表的字段名用途：在查询完表名后，指定数据库和数据表进行注入测试，获取该表下所有字段 1python sqlmap.py -u http://127.0.0.1:8080/?id=1 -D moieo -T moieo_comments --columns 运行结束后得到所有字段 5. 获取数据表内存储的数据用途：在获取并确定数据表内有字段时使用，可获得数据表内存储的数据 1python sqlmap.py -u http://127.0.0.1:8080/?id=1 -D moieo -T moieo_comments --dump 可以看到，执行结束后可获得数据表内每个字段的数据 其他选项1. 获取数据库所有用户在有权管理所有用户的情况下 --users 选项可获得数据库所有用户名 2. 获取数据库用户的密码在有权管理所有用户的情况下 --passwords 选项可获得所有用户的密码，该选项获得到的数据是经过哈希算法加密的可以尝试使用 https://www.cmd5.com/ 硬解 3. 获取当前网站数据库的名称--current-db 选项，可获得当前网站数据库的名称 4. 获取当前网站数据库使用的用户名称--current-user 选项，用于获取当前用户名称 杂项--is-dba 用于判断用户是否管理员权限 --roles 列出数据库管理员角色 --referer，当--level的参数为3或以上，用于指定来源网站，欺骗目标网站，参数为URL --sql-shell 运行自定义SQL语句 --os-cmd 或 --os-shell 执行任意操作系统命令 --file-write xxx.php --file-dest xxx.php 上传文件到数据库服务器，前者为源文件路径，后者为目标数据库服务器的文件路径 --file-read 从数据库服务器中读取文件，参数为数据库服务器中的文件路径","tags":["SQL注入"],"categories":["网络安全"]},{"title":"IP查询接口分享","path":"/2022/07/23/115258/","content":"阿里云阿里云ipip.net提供的 IP 查询接口 请求接口响应结果接口地址：https://api.myip.la/cn?json请求示例 1curl https://api.myip.la/cn?json 1234567891011&#123; &quot;ip&quot;: &quot;172.104.94.100&quot;, &quot;location&quot;: &#123; &quot;country_code&quot;: &quot;JP&quot;, &quot;country_name&quot;: &quot;日本&quot;, &quot;province&quot;: &quot;东京都&quot;, &quot;city&quot;: &quot;品川区&quot;, &quot;latitude&quot;: &quot;35.6130514&quot;, &quot;longitude&quot;: &quot;139.7344198&quot; &#125;&#125; 详细文档https://www.myip.la/ Moieo Api IP 查询接口请求接口响应结果接口地址：POST https://api.moieo.cn/ip/114.114.114.114请求头 名称 注释 timestamp 时间戳(ms) 请求示例例如 IP 为：114.114.114.114 1curl -XPOST -H &quot;timestamp: $(date +%s%3N)&quot; https://api.moieo.cn/ip/114.114.114.114 12345678910&#123; &quot;code&quot;: 200, &quot;msg&quot;: &quot;success&quot;, &quot;data&quot;: &#123; &quot;ip&quot;: &quot;114.114.114.114&quot;, &quot;ip_number&quot;: 1920103026, &quot;location&quot;: &quot;江苏省南京市&quot;, &quot;net_service&quot;: &quot;南京信风网络科技有限公司GreatbitDNS服务器&quot; &#125;&#125; 数据来源于纯真网络开源数据库","tags":["数据接口"],"categories":["数据接口"]},{"title":"Nodejs 从零开始写一个 即时通讯程序","path":"/2022/06/23/130420/","content":"什么是即时通讯？即时通信（IM）是指能够即时发送和接收互联网消息等的业务。自1998年面世以来，特别是近几年的迅速发展，即时通信的功能日益丰富，逐渐集成了电子邮件、博客、音乐、电视、游戏和搜索等多种功能。即时通信不再是一个单纯的聊天工具，它已经发展成集交流、资讯、娱乐、搜索、电子商务、办公协作和企业客户服务等为一体的综合化信息平台 如何在 Web 实现？WebSocket协议是基于TCP的一种新的网络协议。它实现了浏览器与服务器全双工（Full-duplex）通信，即允许服务器主动发送信息给客户端。因此，在WebSocket中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输，客户端和服务器之间的数据交换变得更加简单。 WebSocket 的优缺点 优点：支持服务器推送消息，支持多个请求 缺点：浏览器支持程度不一 开始安装 Express已经安装可以跳过 123npm install -g express-generator#或yarn global add express-generator 建议使用yarn，速度更快 创建一个新项目1express -e &quot;项目名称&quot; 安装需要的依赖 1234cd &quot;项目名称&quot;npm install#或yarn install 启动项目 123yarn start#或npm start 编辑后自动重启项目安装nodemon 123yarn add nodemon#或npm install --save nodemon package.json里修改相关配置 1234&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node ./bin/www.js&quot;, &quot;dev&quot;: &quot;nodemon ./bin/www.js&quot; &#125; 重命名文件bin/www 重命名成 bin/www.js才能自动重启修改后如下重新启动项目 123yarn dev#或npm run dev 项目目录结构如下浏览器访问http://127.0.0.1:3000即可看到如下画面这样你已经完成了第一步 基本实现接下来安装需要的模块 1yarn add socket.io 创建一个文件夹sockets，专门用来写socket服务端在sockets文件夹中创建app.js具体内容如下 123456789const app = function(server) &#123; var io = require(&#x27;socket.io&#x27;)(server); io.on(&#x27;connection&#x27;,function(socket)&#123; socket.on(&#x27;login&#x27;,function(res)&#123; /* 登录 */ io.emit(&quot;登录成功&quot;); &#125;); &#125;);&#125;module.exports = app; /* 导出 */ 在bin/www.js中注册socket.io服务前端部分在public文件夹创建index.html内容如下 浏览器打开：http://127.0.0.1:3000/你将可以看到 emit 向后端 socket.io 发送的 hello 开源仓库：https://moieo.coding.net/public/pchat/PChat/git/files 目前已实现功能前端：ejs模板 多频道(聊天室) 通过QQ获取昵称和头像 通过 Gravatar &#x2F; Cravatar 获取头像 聊天Emoji表情、上传图片 Markdown &#x2F; HTML 消息支持 频道成员退出提醒 频道之间不互通 不好意思😂，界面比较粗糙","tags":["Node"],"categories":["编程语言"]},{"title":"VAB机型搞机教程","path":"/2022/04/22/184719/","content":"该教程适用于大多数vab分区设备(比如红米K40) 刷机请备好电脑哦本教程以红米K40为例温馨提示： 当前教程不适用于小白，如对刷机操作不懂，请勿尝试 数据无价，请备份后操作 刷机不规范，机主两行泪 前提条件首先需要解锁bootloader，不解锁就搞不了咯~小米设备官方解锁网址：https://www.miui.com/unlock注意：解锁bootloader会清除手机的所有内容，记得备份哦！！！具体方法：先在我的设备里连续点击5次MIUI版本号开启开发者选项然后进入设置→开发者选项→设备解锁状态，点使用移动网络进行账号和设备的绑定。（绑定一次之后就不要点第二次了，万一你要等168小时才能解锁）打开电脑，下载解锁工具并打开，手机进入fastboot模式（关机状态下长按开机键+音量-键）然后连接电脑，进入解锁工具之后会提醒你登录，登录完成后，打开右上角的设置→安装驱动，然后开始解锁解锁完成之后手机会自动开机，你会发现第一屏会出现一个解开的🔒的东东，这就代表解锁bootloader成功啦~ 刷入TWRP 刷入twrp需要adb工具， 你可以在下面选一个 秋之盒（推荐） | Android-Platform-Tools还有k40的skkk twrp先把手机重启进入fastboot，然后连接电脑，打开adb命令行 1fastboot boot [twrp的名称].img 等手机进入rec之后，进入高级→ 刷入当前twrp（flash current twrp） 然后就大功告成啦~twrp就固化成功咯。但是刷入其他ROM之后会掉，所以刷入之前点安装ROM后自动重装twrp）或者重启之前再进行上述操作。 安装Magisk重启进入twrp，高级→使用Magisk&#x2F;Magisk Alpha修补boot，修补完成之后，重启系统，去酷安找对应的Magisk&#x2F;Magiak Alpha版本的Magisk Manager安装包进行安装。安装完成后可能会提示修复运行环境，点确定，然后手机会自动重启。","tags":["Android","玩机技巧"]},{"title":"计算机网络基础","path":"/2022/04/18/222354/","content":"什么是计算机网络？计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统 英特网(Internet)：全球信息资源的汇总，是符合 TCP&#x2F;IP 协议的多个计算机网络组成的一个覆盖全球的网络 常见的接入方式：窄带接入(电话拨号)、宽带接入(ADSL、小区宽带）、无线上网 中国四大骨干网中国科技网（CSTNET）中国公用计算机互联网（CHINANET）中国教育和科研计算机网（CERNET）中国金桥信息网（CHINAGBN） 网络设备 名称 作用 网络适配器(网卡) 是计算机介入网络的接口设备 集线器(HUB) 计算机网络中连接多台计算机或其它设备的连接设备 中继器 放大信号，提供电流以驱动长距离电缆，增大信号有效传输距离 网络服务器 为网络提供资源并对这些资源进行管理的计算机 网络工作站 一般用户入网的站点，供用户直接入网的计算机 网络连接器 连网所需的连接部件和设备 通信介质 网络中发送方和接收方之间的物理通道，是网络中传递信息的载体 网桥 通过连接相互独立的网段从而扩大网络的最大传输距离 路由器 属于网间连接设备，它能够在复杂的网络环境中完成数据包的传递工作，是连接英特网的局域网和广域网的设备 交换机 用于电（光）信号转发的网络设备。它可以为接入交换机的任意两个网络节点提供独享的电信号通路。取代了集线器和网桥设备 传输介质 有线：同轴电缆、双绞线、光纤 无线：卫星、光波、紫外线、无线电波、红外线等 拓扑结构IP 地址IP：指互联网协议地址，又译为网际协议地址。是网络资源的标识符，用二进制数字来表示，长度有 32 位(IPv4)和 128 位(IPv6)之分，目前主要采用 IPv4 地址 表：各类 IP 地址的范围 类型 范围 A 类 0.0.0.0 - 127.255.255.255 B 类 128.0.0.0 - 191.255.255.255 C 类 192.0.0.0 - 239.255.255.255 D 类 240.0.0.0 - 247.255.255.255 127.0.0.1：回环测试地址0.0.0.0：表示任何地址 表：OSI 参考模型 层次 名称 功能描述 第 7 层 应用层(Application) 负责网络中应用程序与网络操作系统之间的联系 第 6 层 表示层(Persentation) 用于确定数据交换的格式 第 5 层 会话层(Session) 用户应用程序与网络层的接口 第 4 层 传输层(Transport) 提供会话层和网络层之间的传输服务 第 3 层 网络层(Network) 能够将传输的数据封包，然后通过路由选择、分段组合等控制，将信息从源设备传送到目标设备 第 2 层 数据链路层(Data Link) 主要是修正传输过程中的错误信号，它能够提供可靠的通过物理层介质传输数据的方法 第 1 层 物理层(Physical) 利用传输介质为数据链路层提供物理连接，它规范了网络硬件的特性、规格和传输速度 注 以上两表来自 清华大学出版社《C 语言从入门到精通(第 4 版)》","tags":["计算机基础"],"categories":["计算机基础"]},{"title":"如何在手机上操作Adb？","path":"/2022/01/24/204417/","content":"前言没有电脑在手机里执行一些adb命令很不方便，比如我想激活冰箱，想用一些需要使用adb授权&#x2F;激活的软件，必须要有电脑才行，但是自 Android 11 以后，在 开发者选项 内新增了一个 无线调试 👀（爱死了）文章使用的环境： 机型：Redmi K40 Android版本：12 系统：MIUI 13 终端：Termux 网络：WLAN（必须在 WLAN 环境） 准备工作下载platform-tools工具包百度网盘 (提取码自动填充) 123云盘 OneDrive 失效了请评论区留言 安装终端模拟器这里选用 Termux，你也可以使用其他的终端 开始将文件 platform-tools.zip 解压到 终端的工作目录以使用 百度网盘 app 下载为例执行以下命令 123apt-get install unzip -yunzip -d $HOME /storage/emulated/0/BaiduNetdisk/platform-tools.zipcd platform-tools 授权以 MIUI 13 为例：设置 -&gt; 我的设备 -&gt; 全部参数 -&gt; 多次点击 MIUI 版本设置 -&gt; 更多设置 -&gt; 开发者选项 -&gt; 将 USB 调试 、无线调试、USB安装、USB调试（安全模式）全部打开注：不打开 USB安装 无法使用 adb install 命令安装软件 将 设置 放在后台，打开终端在 platform-tools 目录里执行（不管他目录名，能用就行，可以用ls命令看一下目录里有没有adb文件）先输入以下命令，注意不要按回车😅 1adb pair [ip]:[port] 关于 自己手机在局域网内的 IP 怎么看，请自行百度（无线调试选项页面内有写） 以我的为例IP：192.168.1.4端口：37363端口查看：将 把 Termux 和 设置 分屏，为什么要分屏后面说，设置里打开 开发者选项 里的 无线调试 页面，点击使用配对码配对，显示的对话框中有写 IP地址和端口号 命令为： 1adb pair 192.168.1.4:37363 按下回车后输入 对话框 中显示的 WLAN 配对码成功后在 无线调试 页面 已配对的设备 会多出一个条目输入adb devices命令，查看已连接设备 1234┌─[ecodemo@localhost] - [~] - [一 1月 24, 21:55]└─[$] &lt;&gt; adb devicesList of devices attachedadb-e1a41494-SFEISs._adb-tls-connect._tcp. device 连接成功注：只需配对一次，后续只需要打开无线调试开关，输入adb device即可 为什么要分屏？不分屏会导致配对不上，当你把 设置 放在后台的时候，对话框会被关闭，关闭之后就无法成功配对，分屏可以解决 关于解决 Termux 在 Android 12 内运行 时被系统杀死这个问题遇到的，时候我也很头疼，自己也没有电脑🤫，全靠 Termux 写点代码Android 12 最大进程 32 个，超出后自动将已开启的进程杀死Termux 出现 [Process completed (signal 9) - press Enter]的提示可使用 adb&#x2F;root 等方式修改解决方案来自 Termux Issue连接 adb 后执行以下命令解决 1adb shell &quot;/system/bin/device_config set_sync_disabled_for_tests persistent; /system/bin/device_config put activity_manager max_phantom_processes 2147483647&quot; 只需执行一次即可，命令无输出root 执行以下命令 1su -c &quot;/system/bin/device_config set_sync_disabled_for_tests persistent; /system/bin/device_config put activity_manager max_phantom_processes 2147483647&quot; 关于 adb 的一些使用1.安装软件 1adb install -r -d xxx.apk -r 参数为覆盖安装-d 参数为降级安装（可用于给软件降级，不丢数据） 详情：https://blog.csdn.net/u014589884/article/details/120113281 为啥本文没图片？😅找不到好用不跑路的图床，前一阵子，写的文章 了解计算机 上传了一张图片表格（现在换成了MarkDown）再图床，一个礼拜后 404 了🐶 酷安 @Moieo鹅群：724862228","tags":["Android","Adb","Termux"]},{"title":"计算机基础知识","path":"/2021/11/25/191843/","content":"计算机系统组成包括硬件系统和软件系统两大部分硬件和软件缺一不可，没有软件的计算机称为裸机 在生产生活中的用途： 科学计算 数据处理（信息管理） 辅助设计与制造 教育信息化 电子商务 人工智能 网络通信 信息信息是消息（文字、图像、颜色、符号）中有意义的内容，计算机的应用就是对信息的收集、处理、存储、传递数据是信息的载体，是信息的具体表现形式。信息是数据所表达的含义。信息在计算机中都用数字形式表示。(二进制) 信息技术概念：人们获取、存储、传递、处理、开发和利用信息资源的相关技术 人类开发和利用信息资源手段的总和形成了信息技术。 现代信息技术是以微电子技术为基础，将计算机技术、通信技术以及传感技术相结合的一门新技术。 1946 年在美国诞生第一台计算机 ENICA（埃尼阿克），主要运用于军事领域，没有采用冯·诺依曼体系结构，内部采用十进制进行存储 冯·诺依曼原理 冯诺依曼原理提出将数据和程序存储在同一内存中，实现了可重用性和灵活性。 计算机由五个部件组成：输入设备、输出设备、存储器、运算器和控制器。 存储器包括数据存储器和程序存储器两部分，可以根据需要进行读写和修改。 计算机工作时使用指令集对数据进行处理，通过解释执行程序指令来更新数据存储器中的数据。 不同的程序指令可以重复使用相同的运算器，提高了计算机的执行效率和性能。 计算机的发展阶段 时间段 电子器件 软件 应用领域 第一代 1946 年-1958 年 电子管 机器语言、汇编语言 军事与科研 第二代 1959 年-1964 年 晶体管 高级语言、操作系统 数据处理和事务处理 第三代 1965 年-1970 年 中小规模集成电路 多种高级语言、完善的操作系统 科学计算、数据处理及过程控制 第四代 1971 年至今 大规模、超大规模集成电路 数据库管理系统、网络操作系统 人工智能、数据通信及社会各领域 计算机的发展趋势计算机目前正朝着巨型化、微型化、网络化、智能化和多功能化方向发展 计算机的特点 运算速度块 计算精度高 具有记忆和逻辑判断功能 具有自动执行功能计算机按照用途、价格、体积、性能等标准分为不同类型 计算机辅助系统 CAD 计算机辅助设计 CAM 计算机辅助制造 CBE 计算机辅助教育 CMI 计算机管理教学 CAI 计算机辅助教学 CAT 计算机辅助设计 CIMS 计算机集成制造系统 CAL 计算机辅助学习 发展趋势 巨型化 微型化 网络化 智能化 硬件系统 中央处理器（CPU）由运算器和控制器组成 运算器也称为算数逻辑部件（ALU），其主要功能是对二进制数码进行算数运算或逻辑运算。 控制器是计算机的中枢神经，指挥计算机各个部件自动、协调地工作 CPU和存储器构成了计算机的主机 运算器的基本功能是完成对各种数据的加工处理，即数据的算数运算和逻辑运算 存储器分为主存储器（内存）和辅助存储器（外存）两大类 CPU 不能直接访问外存，当需要某一程序或数据时，先应调入内存，然后再运行 内存一般采用半导体存储单元，包括只读存储器、随机存储器和高速缓冲存储器。 只读存储器（ROM）断电不会丢失数据 输入设备和输出设备 键盘、鼠标、摄像头、扫描仪、光笔、手写输入板、游戏杆（手柄）、语音输入装置等都属于输入设备 其中，鼠标和键盘是最常用的输入设备 常见的输出设备有显示器、打印机、绘图仪、影响输出系统、语音输出系统、磁记录设备等 在计算机硬件设备中，磁盘驱动器既可以当做输入设备，又可以当做输出设备 总线总线是计算机各功能部件之间传送信息的公共通信干线，它是由导线组成的传输线束。微机内部信息的传送是通过总线进行的，各功能部件通过总线连在一起，几乎决定着主板的全部功能。 类型数据总线、地址总线和控制总线，分别用来传输数据、数据地址及控制信号。 地址总线：用于指示CPU访问存储器或I&#x2F;O设备时所需访问的物理地址。地址总线的宽度决定了CPU可以寻址的内存空间大小，如32位CPU可寻址的最大内存空间为4G。 数据总线：用于传输CPU和内存或I&#x2F;O设备之间的数据。数据总线的宽度决定了CPU与其他设备之间可以同时传输的数据量，如32位数据总线每次可传输32位（4个字节）的数据。 控制总线：用于传输控制信号，包括读写控制、中断请求、时序同步等。控制总线的作用是协调CPU和外部设备之间的操作，保证整个计算机系统的稳定运行。 数据与信息思维导图：https://mubucm.com/doc/1G0CtTi0GZc密码 moieo.cn","tags":["计算机基础"],"categories":["计算机基础"]},{"title":"韩信点兵：韩信带1500名士兵打仗...","path":"/2021/10/07/140524/","content":"韩信带1500名士兵打仗，战死四五百人，剩下的士兵排队：站3人一排，多出2人；站5人一排多出4人；站7人一排，多出6人。韩信立马说出1049。请验证结果 解题：设 战死人数为 x因为 战死 四五百人，所以取值范围在 1000-1500之间站3人一排，多出2人 则 x &#x2F; 3 的余数为 2 (x%3&#x3D;&#x3D;2)站5人一排，多出4人 则 x &#x2F; 5 的余数为 4 (x%5&#x3D;&#x3D;4)站7人一排，多出6人 则 x &#x2F; 3 的余数为 6 (x%7&#x3D;&#x3D;6) 且 x 同时满足 (x%3==2) (x%5==4) (x%7==6)… 将上述综合起来，代码如下： C++ 123456789101112131415#include &lt;iostream&gt;using namespace std;int main() &#123; for (int x= 1;x&lt;1500;x++) &#123; if(x%3==2 &amp;&amp; x%5==4 &amp;&amp; x%7==6 &amp;&amp; x &lt; 1500 &amp;&amp; x &gt; 1000) &#123; cout &lt;&lt; x &lt;&lt; endl; break; &#125; else &#123; continue; &#125; &#125; return 0;&#125; Python 123456for x in range(1, 1500): if (x%3==2) and (x%5==4) and (x%7==6) and x &lt; 1500 and x &gt; 1000: print(x) break else: continue 题目仅要求验证结果是否正确，所以又可以直接使用if关键字 C++如下 123456789#include &lt;iostream&gt; using namespace std; int main() &#123; if(1049%3==2 &amp;&amp; 1049%5==4 &amp;&amp; 1049%7==6)&#123; cout &lt;&lt; &quot;结果正确&quot; &lt;&lt; endl; &#125;&#125;","tags":["C++","Python"]},{"title":"Rust语言计算斐波那契数列","path":"/2021/08/22/081832/","content":"斐波那契数列指的是这样一个数列 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233，377，610，987，1597，2584，4181，6765，10946，17711，28657，46368……..这个数列从第3项开始，每一项都等于前两项之和。f(x) = f(x-1) + f(x-2) 实现计算的Rust代码如下123456789101112131415161718fn main()&#123; for i in 1..101 &#123; println!(&quot;f(&#123;&#125;)=f(&#123;&#125;-1)+f(&#123;&#125;-2) = &#123;&#125;&quot;, i , i, i, ran(i)); &#125;&#125;fn ran(mut i: i32) -&gt; i128 &#123; let mut total: i128 = 0; let mut t_1: i128 = 1; let mut t_2: i128 = 1; while i &gt; 2 &#123; total = t_1 + t_2; t_1 = t_2; t_2 = total; i -= 1; &#125; return total;&#125; 运行结果123456789101112f(1)=f(1-1)+f(1-2) = 0f(2)=f(2-1)+f(2-2) = 0f(3)=f(3-1)+f(3-2) = 2f(4)=f(4-1)+f(4-2) = 3f(5)=f(5-1)+f(5-2) = 5f(6)=f(6-1)+f(6-2) = 8f(7)=f(7-1)+f(7-2) = 13f(8)=f(8-1)+f(8-2) = 21f(9)=f(9-1)+f(9-2) = 34f(10)=f(10-1)+f(10-2) = 55...f(100)=f(100-1)+f(100-2) = 354224848179261915075","tags":["Rust"],"categories":["编程语言"]},{"title":"Hello World","path":"/2020/04/15/000000/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"path":"/index.html","content":"Hi! Moieo 👋关于联系我近期发布我的 Github站点工具高考倒计时生日查圆周率交流群Linux 俱乐部https://jq.qq.com/?_wv=1027&k=QmSBCwACQQ频道https://pd.qq.com/s/amx2jgsbo"},{"title":"关于","path":"/about/index.html","content":"本站 由 GitHub Page 托管 重新部署于 2022年4月15日 本站更新内容 更改配色 使用 Viewer.js 支持文章查看大图 如何找到我？ 官方鹅群：724862228 微博：Moieo04 E-Mail: moe@moieo.net Github: Moieo Telegram: Moieo 如何向我们投稿？ 发送 .docx、.doc、.md 等 格式文稿至 邮箱 moe@moieo.net 在鹅群中联系 投稿的一些要求 .docx、.doc 等 Word 文档 文稿必须是 大纲（在大纲视图下编写） .md 格式的 MarkDown 富文本 一般建议图片 上传到图床 图片没有使用图床或图片直链的大概率不被接受 文末留下作者真实姓名或昵称(笔名) MarkDown 官方文档 投稿后多久能在博客显示？ 在邮件被看到的 72 小时内"},{"title":"开放接口","path":"/api/index.html","content":"BaseURL POST IP查询 请求参数 返回结果 返回数据结构 POST 圆周率查询 请求参数 返回结果 返回数据结构 BaseURL https://api.moieo.cn POST IP查询POST &#x2F;ip&#x2F;{ip} 根据 IPv4 地址查询所在归属地的地址 请求参数 名称 位置 类型 必选 说明 ip path string 是 需要查询的 IPv4 地址 timestamp header string 是 时间戳 (ms) 返回示例 成功 12345678910&#123; &quot;code&quot;: 200, &quot;msg&quot;: &quot;success&quot;, &quot;data&quot;: &#123; &quot;ip&quot;: &quot;8.8.2.2&quot;, &quot;ip_number&quot;: 134742530, &quot;location&quot;: &quot;美国科罗拉多州布隆菲尔德市&quot;, &quot;net_service&quot;: &quot;Level3通信股份有限公司&quot; &#125;&#125; 返回结果 状态码 状态码含义 说明 数据模型 200 OK 成功 Inline 返回数据结构状态码 200 名称 类型 必选 约束 中文名 说明 » code integer true none 状态码 请求后的状态代码 » msg string true none 消息 状态说明 » data object true none 数据 存储请求结果 »» ip string true none IPv4 地址 所查询的 IPv4 地址 »» ip_number integer true none IPv4 整数 IPv4 的十进制值 »» location string true none 位置 IPv4 所在归属地的位置 »» net_service string true none 互联网服务商 IPv4 地址对应的互联网服务商 POST 圆周率查询POST &#x2F;pi&#x2F;{pi} 根据 出生日期，查询在圆周率小数点后所出现的位置 请求参数 名称 位置 类型 必选 说明 pi path string 是 年月日 timestamp header string 是 时间戳(ms) 返回示例 成功 12345678&#123; &quot;code&quot;: 200, &quot;msg&quot;: &quot;Success&quot;, &quot;data&quot;: &#123; &quot;date&quot;: &quot;20050520&quot;, &quot;position&quot;: &quot;146457109&quot; &#125;&#125; 返回结果 状态码 状态码含义 说明 数据模型 200 OK 成功 Inline 返回数据结构状态码 200 名称 类型 必选 约束 中文名 说明 » code integer true none 状态码 请求后的状态代码 » msg string true none 消息 状态说明 » data object¦null false none 数据 存储请求结果 »» date string false none 日期 请求参数中的出生日期年月日 »» position string false none 位置 所在圆周率中的位置"},{"title":"生日查圆周率","path":"/birthtopi/index.html","content":"查一查你的生日出现在圆周率小数点后的第几位"},{"title":"分类","path":"/categories/index.html","content":""},{"path":"/contact-me/index.html","content":"Hi! Moieo 👋关于联系我近期发布📫 联系我电子邮件如果你想联系我，那么电子邮箱是一个很好且方便的方式~邮箱：moe@moieo.netGPG 指纹🔗 其他平台名称地址知乎@Moieo酷安@MoieoGitee@MoieoGitlab@MoieoGithub@Moieo"},{"title":"友链","path":"/friends/index.html","content":"各位朋友们DDverse 来自酷安的朋友们籽夏小屋 关于友链关于交换友链本站非常热衷于交换友链，但贵站需满足一下条件： 添加本站在贵站的友链之中 贵站符合法法律法规，且无广告、非盈利性 贵站高质量、原创创作 (优先) 非下列域名后缀 (优先) .tk .ml .ga .gq .cf .eu.org .vercel.app .netlify.app 如何加入友链？第一步：将本站添加至贵站友链本站友链信息：1234title: 晴雨笔记avatar: https://blog.moieo.net/favicon.icourl: https://blog.moieo.netdescription: 素白青韵，简静安然第二步：提交友链申请发送邮件至 moe@moieo.net主题：晴雨笔记友链申请内容格式：1234title: xxx # 网站标题avatar: xxx # 头像url: xxx # 地址description: xxx # 描述 不想发邮件？自助提交第一步：将本站添加至贵站友链本站友链信息：1234title: 晴雨笔记avatar: https://blog.moieo.net/favicon.icourl: https://blog.moieo.netdescription: 素白青韵，简静安然第二步：提交友链申请申请地址：https://github.com/moieo/rainbow-friends/issues选择 友情链接模板按照模板在双引号内修改你自己的信息"},{"title":"高考倒计时","path":"/lost_time/index.html","content":"距离高考还有 天 小时 分钟 秒 你的高中生活还剩下 天 你的高中生活还剩下 小时 你的高中生活还剩下 分钟 你的高中生活还剩下 秒 选择年份"},{"title":"笔记","path":"/notes/index.html","content":"git submodules拉取 submodule更新 submodule GnuPG 命令生成密钥生成完整功能的密钥列出密钥导出公钥导出私钥导出 ASCII 格式密钥发送密钥到公钥服务器从公钥服务器搜索密钥从公钥服务器导入密钥公钥服务器 DNF命令** Fedora DNF5中移除旧版内核 **"},{"path":"/static/moieo.js","content":"var establishedDate = new Date('2020-04-15T00:00:00'); function updateEstablishedTime() { var now = new Date(); var difference = now.getTime() - establishedDate.getTime(); // 计算天数、小时数、分钟数和秒数 var days = Math.floor(difference / (1000 * 60 * 60 * 24)); var hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)); var minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60)); var seconds = Math.floor((difference % (1000 * 60)) / 1000); var displayTime = \"本站已稳定运行 \" + days + \" 天 \" + hours + \" 小时 \" + minutes + \" 分钟 \" + seconds + \" 秒\"; // 获取HTML元素并更新文本内容 var establishedTimeElement = document.getElementById('established-time'); if (establishedTimeElement) { establishedTimeElement.textContent = displayTime; } setTimeout(updateEstablishedTime, 1000); // 每秒更新一次 } document.addEventListener(\"DOMContentLoaded\", function () { updateEstablishedTime(); });"},{"title":"标签","path":"/tags/index.html","content":""}]